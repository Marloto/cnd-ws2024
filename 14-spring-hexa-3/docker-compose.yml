# YAML: Markup Language, vgl. XML, JSON, usw.
version: "3.4"

services:
  # vgl. Docker-CLI: docker run alpine:3.18.3 echo "Hello, world"
  # im Dockerfile wäre es der CMD-Teil, wird hier überlagert
  # app:
  #  image: alpine:3.18.3
  #  command: echo "Hello, world"
  # vgl. Docker-CLI: docker run alpine:3.18.3 echo "Hello, world"

  # vgl. Docker-CLI: docker run -p -d 12345:80 nginx:1.21
  # -> wie als Hintergrund-Prozess, nicht an der Konsole hängend?
  # app:
  #   image: nginx:1.21
  #   ports:
  #     - 12345:80


  # vgl. docker build -t app .
  # vgl. docker run -d -p 12345:8080 app
  # vgl. docker run -d --name app --network app-example app:latest --spring.jpa.hibernate.ddl-auto=update --spring.datasource.url=jdbc:mysql://db:3306/${MYSQL_DATABASE} --spring.datasource.username=${MYSQL_USER} --spring.datasource.password=${MYSQL_PASSWORD} --spring.datasource.driver-class-name=com.mysql.jdbc.Driver --mqtt.broker=tcp://broker:1883
  app:
    # anstatt image-Attribut, kann build verwendet werden
    build: 
      context: .
      args:
        - SOMETHING=foo123
    # environment:
    #   SPRING_JPA_HIBERNATE_DDL_AUTO: update
    #   SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/${MYSQL_DATABASE}
    #   SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
    #   SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
    #   SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver
    #   MQTT_BROKER: tcp://broker:1883
    command: --spring.jpa.hibernate.ddl-auto=update --spring.datasource.url=jdbc:mysql://db:3306/${MYSQL_DATABASE} --spring.datasource.username=${MYSQL_USER} --spring.datasource.password=${MYSQL_PASSWORD} --spring.datasource.driver-class-name=com.mysql.jdbc.Driver --mqtt.broker=tcp://broker:1883
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:12345/api/v1/posts || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s
    networks:
      - dbnet
      - publicnet

  # vgl. docker run -d --name db --network app-example -e "MYSQL_USER=${MYSQL_USER}" -e "MYSQL_PASSWORD=${MYSQL_PASSWORD}" -e "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" -e "MYSQL_DATABASE=${MYSQL_DATABASE}" mysql:5.7
  db:
    image: mysql:5.7
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
#    ports:
#      - 3306:3306
    networks:
      - dbnet

  broker:
    image: eclipse-mosquitto
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
#    ports:
#      - 1883:1883
#      - 9001:9001
    networks:
      - dbnet

  proxy:
    image: nginx:1.21
    ports:
      - "12345:80"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
    depends_on:
      - app
    networks:
      - publicnet

volumes:
  mysql_data:
  mosquitto_data:
  mosquitto_log:

networks:
  dbnet:
  publicnet:

# Docker Compose erwartet im aktuellen Ordner eine docker-compose.yml
# -> sollte die nicht existieren gibt es fallbacks (z.B. überordner), wenn keine existiert, dann gibt es fehler
# Namen von Containern die sich aus Docker-Compose ergeben haben eine bestimmte Benennung
# -> 14-spring-hexa-3-app-1
# -> "Projekt-Ordner / -Root" + "Service-Name" + "Nummerierung"
# Steuerung von Containern
# -> wie bisher über die Docker CLI, mittels vollständigem Namen der Container
# -> oder im Ordner wo die Compose-Config liegt mit Service-Namen der Docker-Compose-Dateien
# -> start, stop, restart, rm, kill mit Service-Namen um gezielt Services zu steuern, leerzeichengetrennt für mehrere
# -> up startet immer alle Dienste oder für bestimmte Services wenn Namen angegeben werden
#    -> prüft, was aktuell existiert, startet nur modifzierte Container
#    -> Kombiniert pull, falls nicht existiert, create und start von Images/Containern
# -> down fährt _alle_ Container runter und entfernt sie
# -> build baut einen container, wenn er für die Config ein build-Attribut nutzt (gilt nicht für image)


# -> volumes
# -> networks
# -> port-mapping
# -> env
# -> args
# -> build